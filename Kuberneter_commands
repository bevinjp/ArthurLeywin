# Managing Pods
1. kubectl run <pod-name> --image=<image> --port=<port>
2. kubectl get pods
3. kubectl describe pod <pod-name>
4. kubectl delete pod <pod-name>

# Managing Deployments
5. kubectl create deployment <deployment-name> --image=<image>
6. kubectl get deployments
7. kubectl describe deployment <deployment-name>
8. kubectl scale deployment <deployment-name> --replicas=<number-of-replicas>
9. kubectl set image deployment/<deployment-name> <container-name>=<new-image>
10. kubectl delete deployment <deployment-name>

# Managing Services
11. kubectl expose deployment <deployment-name> --type=<service-type> --port=<port> --target-port=<target-port>
12. kubectl get services
13. kubectl describe service <service-name>
14. kubectl delete service <service-name>

# Managing ConfigMaps and Secrets
15. kubectl create configmap <configmap-name> --from-literal=<key>=<value>
16. kubectl create configmap <configmap-name> --from-file=<file-path>
17. kubectl get configmaps
18. kubectl describe configmap <configmap-name>
19. kubectl create secret generic <secret-name> --from-literal=<key>=<value>
20. kubectl create secret generic <secret-name> --from-file=<file-path>
21. kubectl get secrets
22. kubectl describe secret <secret-name>

# Managing Namespaces
23. kubectl create namespace <namespace-name>
24. kubectl get namespaces
25. kubectl describe namespace <namespace-name>
26. kubectl delete namespace <namespace-name>

# Managing Volumes and Persistent Volume Claims
27. kubectl get pv
28. kubectl get pvc

# Managing ReplicaSets
29. kubectl get replicasets
30. kubectl describe replicaset <replicaset-name>
31. kubectl delete replicaset <replicaset-name>

# Logs and Debugging
32. kubectl logs <pod-name>
33. kubectl logs <pod-name> -c <container-name>
34. kubectl exec <pod-name> -- <command>
35. kubectl exec -it <pod-name> -- /bin/bash

# Managing Jobs and CronJobs
36. kubectl create job <job-name> --image=<image>
37. kubectl get jobs
38. kubectl describe job <job-name>
39. kubectl delete job <job-name>
40. kubectl create cronjob <cronjob-name> --image=<image> --schedule="<cron-schedule>"
41. kubectl get cronjobs
42. kubectl describe cronjob <cronjob-name>
43. kubectl delete cronjob <cronjob-name>

# Managing StatefulSets
44. kubectl get statefulsets
45. kubectl describe statefulset <statefulset-name>
46. kubectl delete statefulset <statefulset-name>

# Managing DaemonSets
47. kubectl get daemonsets
48. kubectl describe daemonset <daemonset-name>
49. kubectl delete daemonset <daemonset-name>

# Cluster Management and Configuration
50. kubectl cluster-info
51. kubectl config view
52. kubectl config set-context --current --namespace=<namespace-name>
53. kubectl config current-context

# Apply and Edit Resources
54. kubectl apply -f <file.yaml>
55. kubectl edit <resource-type> <resource-name>

# Resource Management and Cleanup
56. kubectl delete -f <file.yaml>
57. kubectl delete <resource-type> --selector <label>=<value>

# Using Labels and Annotations
58. kubectl label <resource-type> <resource-name> <key>=<value>
59. kubectl label <resource-type> <resource-name> <key>-
60. kubectl annotate <resource-type> <resource-name> <key>=<value>

# Debugging and Troubleshooting
61. kubectl port-forward <pod-name> <local-port>:<pod-port>
62. kubectl get events
63. kubectl top pod <pod-name>

# Advanced Filtering and Querying
64. kubectl get <resource-type> --selector <label>=<value>
65. kubectl get <resource-type> <resource-name> -o jsonpath='{.status.phase}'










Basic Commands (Beginner):
  create          Create a resource from a file or from stdin
  expose          Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service
  run             Run a particular image on the cluster
  set             Set specific features on objects

Basic Commands (Intermediate):
  explain         Get documentation for a resource
  get             Display one or many resources
  edit            Edit a resource on the server
  delete          Delete resources by file names, stdin, resources and names, or by resources and label selector

Deploy Commands:
  rollout         Manage the rollout of a resource
  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Auto-scale a deployment, replica set, stateful set, or replication controller

  uncordon        Mark node as schedulable
  drain           Drain node in preparation for maintenance
  taint           Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe        Show details of a specific resource or group of resources
  logs            Print the logs for a container in a pod
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  cp              Copy files and directories to and from containers
  auth            Inspect authorization
  debug           Create debugging sessions for troubleshooting workloads and nodes
  events          List events

Advanced Commands:
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  patch           Update fields of a resource
  replace         Replace a resource by file name or stdin
  wait            Experimental: Wait for a specific condition on one or many resources
  kustomize       Build a kustomization target from a directory or URL

Settings Commands:
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  completion      Output shell completion code for the specified shell (bash, zsh, fish, or powershell)

Subcommands provided by plugins:
  convert.exe   The command convert.exe is a plugin installed by the user

Other Commands:
  api-resources   Print the supported API resources on the server
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  config          Modify kubeconfig files
  plugin          Provides utilities for interacting with plugins
  version         Print the client and server version information

Usage:
  kubectl [flags] [options]


    --as='':
        Username to impersonate for the operation. User could be a regular user or a service account in a namespace.

    --as-group=[]:
        Group to impersonate for the operation, this flag can be repeated to specify multiple groups.

    --as-uid='':
        UID to impersonate for the operation.

    --cache-dir='C:\Users\bphilip\.kube\cache':
        Default cache directory

    --certificate-authority='':
        Path to a cert file for the certificate authority

    --client-certificate='':
        Path to a client certificate file for TLS

    --client-key='':
        Path to a client key file for TLS

    --cluster='':
        The name of the kubeconfig cluster to use

    --context='':
        The name of the kubeconfig context to use

    --disable-compression=false:
        If true, opt-out of response compression for all requests to the server

    --insecure-skip-tls-verify=false:
        If true, the server's certificate will not be checked for validity. This will make your HTTPS connections
        insecure

    --kubeconfig='':
        Path to the kubeconfig file to use for CLI requests.

    --log-flush-frequency=5s:
        Maximum number of seconds between log flushes

    --match-server-version=false:
        Require server version to match client version

    -n, --namespace='':
        If present, the namespace scope for this CLI request

    --password='':
        Password for basic authentication to the API server

    --profile='none':
        Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)

    --profile-output='profile.pprof':
        Name of the file to write the profile to

    --request-timeout='0':
        The length of time to wait before giving up on a single server request. Non-zero values should contain a
        corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.

    -s, --server='':
        The address and port of the Kubernetes API server

    --tls-server-name='':
        Server name to use for server certificate validation. If it is not provided, the hostname used to contact the
        server is used

    --token='':
        Bearer token for authentication to the API server

    --user='':
        The name of the kubeconfig user to use

    --username='':
        Username for basic authentication to the API server

    -v, --v=0:
        number for the log level verbosity

    --vmodule=:
        comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log
        format)

    --warnings-as-errors=false:
        Treat warnings received from the server as errors and exit with a non-zero exit code
